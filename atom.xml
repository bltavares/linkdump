<?xml version="1.0" encoding="utf-8"?>
 
<feed xmlns="http://www.w3.org/2005/Atom">
 
	<title>Link Dump</title>
	<link href="http://linkdump.bltavares.com/feed.atom" rel="self" />
	<link href="http://linkdump.bltavares.com/" />
	<id>http://linkdump.bltavares.com/</id>
	<updated>2014-11-29T18:53:38-02:00</updated>

  	<entry>
		<title> Link Dump #1 - The one with a bunch of links&#10;</title>
		<link href="http://linkdump.bltavares.com/archive/01-dump.org" />
		<link rel="alternate" type="text/html" href="http://linkdump.bltavares.com/archive/01-dump.html"/>
		<id>http://linkdump.bltavares.com/archive/01-dump.org</id>
		<updated>2014-11-23T00:32:24-02:00</updated>
		<author>
			<name>Bruno Tavares</name>
		</author>
		<content xml:space="preserve" type="text">
        <![CDATA[
            #+Title: Link Dump #1 - The one with a bunch of links&#10;
&#10;
Hello there,&#10;
&#10;
This is the first collection of links I am creating and I hope you enjoy it.&#10;
&#10;
I would love to have this as a two way channel to share links.&#10;
Feel free to hit me up over email with content.&#10;
&#10;
No more rambling, there we go.&#10;
&#10;
-----&#10;
&#10;
** Clojure/conj&#10;
&#10;
Clojure/conj just happened with amazing talks.&#10;
The videos are being published really fast, almost after the talk ends.&#10;
You can follow up on the [[https://www.youtube.com/playlist?list%3DPLZdCLR02grLoc322bYirANEso3mmzvCiI][ClojureTV Youtube Channel]]&#10;
&#10;
Before you go digging the content, you might want to check Eric Normand's pre-conj material.&#10;
He collected more information around the talks, with interviews and links, so you can be part of the conversation that have been happening in-between the talks.&#10;
One cool thing is that some talks are continuations of previous, and all of this conversation is being capture on the [[http://www.lispcast.com/pre-conj-2014][Pre-conj Prep 2014 archive]]&#10;
&#10;
** Dependent Types&#10;
&#10;
Are you ready to have your mind blow?&#10;
I've been hearing [[https://twitter.com/ctfordLink:%20https://twitter.com/ctford][Chris Ford]] talk about [[http://www.idris-lang.org/][Idris]] for a while, and recently I came across Brian McKenna coding a [[https://www.youtube.com/watch?v%3DfVBck2Zngjo][type safe printf]] using dependent types.&#10;
And it is amazing!&#10;
&#10;
Brian talked on StrangeLoop 2014 about Idris [[https://www.youtube.com/watch?v%3D4i7KrG1Afbk][with pratical examples]] and Chris Ford talked about the ideas [[http://vimeo.com/100976695][behind dependent types]].&#10;
It is worth checking to get your mind expanded around the type system that is not so mainstream.&#10;
&#10;
** Unikernels&#10;
Depoying applications are getting easier everyday. Since docker came into play, the deployment scenarios are changing a lot.&#10;
Having a single unit do get your application running feels amazing, making sure the package is consisten across environments.&#10;
&#10;
Darren Rush comments that this could be the path to introduce [[https://medium.com/@darrenrush/after-docker-unikernels-and-immutable-infrastructure-93d5a91c849e][Unikernels]] on your immutable server deployment and list some of the projects that already tries to help you running your application on the metal with little overhead.&#10;
&#10;
** Xplain - Explaining X protocol on the browser&#10;
Recently, Jasper St. Pierre added a new chapter on his [[https://magcius.github.io/xplain/article/index.html][interactive tutorial]] that explains how X works to display images on your computer.&#10;
&#10;
** Rust&#10;
[[http://www.rust-lang.org/][Rust]] is a pretty interesting language that is being developed by Mozilla and brings some ideas to refresh the system programing space.&#10;
There are a bunch of content around the things that Rust are incorporating, like algebric datatypes, macros and borrowing pointers.&#10;
&#10;
It is a language in development, and you can see some discussions like [[http://lucumr.pocoo.org/2014/11/6/error-handling-in-rust/][how to deal with errors]] and [[http://smallcultfollowing.com/babysteps/blog/2014/11/14/allocators-in-rust/][what allocator should be used]].&#10;
&#10;
The lifecycle of pointers itself generates several blog posts and looks like one of the most interesting features of the language.&#10;
&#10;
- http://words.steveklabnik.com/pointers-in-rust-a-guide&#10;
- http://paulkoerbitz.de/posts/Understanding-Pointers-Ownership-and-Lifetimes-in-Rust.html&#10;
- http://blog.skylight.io/rust-means-never-having-to-close-a-socket/&#10;
- http://www.randomhacks.net/2014/09/19/rust-lifetimes-reckless-cxx/&#10;
&#10;
You can also see the macro system in action on [[https://danielkeep.github.io/quick-intro-to-macros.html][this blog post]].&#10;
&#10;
It is being used to write [[https://github.com/servo/servo][Servo]], a new browser engine. Using the borrowing pointer concept, they are being able to write [[https://blog.mozilla.org/research/2014/08/26/javascript-servos-only-garbage-collector/][better garbage collected]] code for the engine.&#10;
Skylight is using Rust to write fast Ruby gems, instead of using C, and they [[http://blog.skylight.io/bending-the-curve-writing-safe-fast-native-gems-with-rust/?utm_source%3Drubyweekly&utm_medium%3Demail][wrote about the process]] as well.&#10;
&#10;
You might ask "What about go?", and Adam Jacob put up a nice [[https://medium.com/@adamhjk/rust-and-go-e18d511fbd95][write up]] around those two languages.&#10;
There are also Armin Ronarcher's [[http://lucumr.pocoo.org/2014/10/1/a-fresh-look-at-rust/][write up]] on how he perceives Rust on the current ecosystem.&#10;
&#10;
-----&#10;
&#10;
I think there is already a handful of content, and I gotta save some for the next link dump.&#10;
Keep producing new content and send me links.&#10;
&#10;
Cheers,&#10;
&#10;
Bruno Tavares&#10;
        ]]>
		</content>
	</entry>

</feed>
