<?xml version="1.0" encoding="utf-8"?>
 
<feed xmlns="http://www.w3.org/2005/Atom">
 
	<title>Link Dump</title>
	<link href="http://linkdump.bltavares.com/atom.xml" rel="self" />
	<link href="http://linkdump.bltavares.com/" />
	<id>http://linkdump.bltavares.com/</id>
	<updated>2015-01-18T20:02:48-02:00</updated>

  	<entry>
		<title>Link Dump #1 - The one with a bunch of links</title>
		<link href="http://linkdump.bltavares.com/archive/01-dump.html" />
		<link rel="alternate" type="text/plain" href="http://linkdump.bltavares.com/archive/01-dump.org"/>
		<id>http://linkdump.bltavares.com/archive/01-dump.html</id>
		<updated>2014-11-23T00:32:24-02:00</updated>
		<author>
			<name>Bruno Tavares</name>
		</author>
		<content xml:space="preserve" type="html">
        <![CDATA[
            <div id="content">
<h1 class="title">Link Dump #1 - The one with a bunch of links</h1>
<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Clojure/conj</a></li>
<li><a href="#sec-2">2. Dependent Types</a></li>
<li><a href="#sec-3">3. Unikernels</a></li>
<li><a href="#sec-4">4. Xplain - Explaining X protocol on the browser</a></li>
<li><a href="#sec-5">5. Rust</a></li>
</ul>
</div>
</div>
<p>
Hello there,
</p>

<p>
This is the first collection of links I am creating and I hope you enjoy it.
</p>

<p>
I would love to have this as a two way channel to share links.
Feel free to hit me up over email with content.
</p>

<p>
No more rambling, there we go.
</p>

<hr  />

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Clojure/conj</h2>
<div class="outline-text-2" id="text-1">
<p>
Clojure/conj just happened with amazing talks.
The videos are being published really fast, almost after the talk ends.
You can follow up on the <a href="https://www.youtube.com/playlist?list=PLZdCLR02grLoc322bYirANEso3mmzvCiI">ClojureTV Youtube Channel</a>
</p>

<p>
Before you go digging the content, you might want to check Eric Normand's pre-conj material.
He collected more information around the talks, with interviews and links, so you can be part of the conversation that have been happening in-between the talks.
One cool thing is that some talks are continuations of previous, and all of this conversation is being capture on the <a href="http://www.lispcast.com/pre-conj-2014">Pre-conj Prep 2014 archive</a>
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Dependent Types</h2>
<div class="outline-text-2" id="text-2">
<p>
Are you ready to have your mind blow?
I've been hearing <a href="https://twitter.com/ctfordLink:%20https://twitter.com/ctford">Chris Ford</a> talk about <a href="http://www.idris-lang.org/">Idris</a> for a while, and recently I came across Brian McKenna coding a <a href="https://www.youtube.com/watch?v=fVBck2Zngjo">type safe printf</a> using dependent types.
And it is amazing!
</p>

<p>
Brian talked on StrangeLoop 2014 about Idris <a href="https://www.youtube.com/watch?v=4i7KrG1Afbk">with pratical examples</a> and Chris Ford talked about the ideas <a href="http://vimeo.com/100976695">behind dependent types</a>.
It is worth checking to get your mind expanded around the type system that is not so mainstream.
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> Unikernels</h2>
<div class="outline-text-2" id="text-3">
<p>
Depoying applications are getting easier everyday. Since docker came into play, the deployment scenarios are changing a lot.
Having a single unit do get your application running feels amazing, making sure the package is consisten across environments.
</p>

<p>
Darren Rush comments that this could be the path to introduce <a href="https://medium.com/@darrenrush/after-docker-unikernels-and-immutable-infrastructure-93d5a91c849e">Unikernels</a> on your immutable server deployment and list some of the projects that already tries to help you running your application on the metal with little overhead.
</p>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> Xplain - Explaining X protocol on the browser</h2>
<div class="outline-text-2" id="text-4">
<p>
Recently, Jasper St. Pierre added a new chapter on his <a href="https://magcius.github.io/xplain/article/index.html">interactive tutorial</a> that explains how X works to display images on your computer.
</p>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> Rust</h2>
<div class="outline-text-2" id="text-5">
<p>
<a href="http://www.rust-lang.org/">Rust</a> is a pretty interesting language that is being developed by Mozilla and brings some ideas to refresh the system programing space.
There are a bunch of content around the things that Rust are incorporating, like algebric datatypes, macros and borrowing pointers.
</p>

<p>
It is a language in development, and you can see some discussions like <a href="http://lucumr.pocoo.org/2014/11/6/error-handling-in-rust/">how to deal with errors</a> and <a href="http://smallcultfollowing.com/babysteps/blog/2014/11/14/allocators-in-rust/">what allocator should be used</a>.
</p>

<p>
The lifecycle of pointers itself generates several blog posts and looks like one of the most interesting features of the language.
</p>

<ul class="org-ul">
<li><a href="http://words.steveklabnik.com/pointers-in-rust-a-guide">http://words.steveklabnik.com/pointers-in-rust-a-guide</a>
</li>
<li><a href="http://paulkoerbitz.de/posts/Understanding-Pointers-Ownership-and-Lifetimes-in-Rust.html">http://paulkoerbitz.de/posts/Understanding-Pointers-Ownership-and-Lifetimes-in-Rust.html</a>
</li>
<li><a href="http://blog.skylight.io/rust-means-never-having-to-close-a-socket/">http://blog.skylight.io/rust-means-never-having-to-close-a-socket/</a>
</li>
<li><a href="http://www.randomhacks.net/2014/09/19/rust-lifetimes-reckless-cxx/">http://www.randomhacks.net/2014/09/19/rust-lifetimes-reckless-cxx/</a>
</li>
</ul>

<p>
You can also see the macro system in action on <a href="https://danielkeep.github.io/quick-intro-to-macros.html">this blog post</a>.
</p>

<p>
It is being used to write <a href="https://github.com/servo/servo">Servo</a>, a new browser engine. Using the borrowing pointer concept, they are being able to write <a href="https://blog.mozilla.org/research/2014/08/26/javascript-servos-only-garbage-collector/">better garbage collected</a> code for the engine.
Skylight is using Rust to write fast Ruby gems, instead of using C, and they <a href="http://blog.skylight.io/bending-the-curve-writing-safe-fast-native-gems-with-rust/?utm_source=rubyweekly&utm_medium=email">wrote about the process</a> as well.
</p>

<p>
You might ask "What about go?", and Adam Jacob put up a nice <a href="https://medium.com/@adamhjk/rust-and-go-e18d511fbd95">write up</a> around those two languages.
There are also Armin Ronarcher's <a href="http://lucumr.pocoo.org/2014/10/1/a-fresh-look-at-rust/">write up</a> on how he perceives Rust on the current ecosystem.
</p>

<hr  />

<p>
I think there is already a handful of content, and I gotta save some for the next link dump.
Keep producing new content and send me links.
</p>

<p>
Cheers,
</p>

<p>
Bruno Tavares</p>
</div>
</div>
</div>
<div id="postamble" class="status">
<p class="author">Author: Bruno Tavares</p>
<p class="date">Created: 2014-11-22 Sat 21:20</p>
<p class="creator"><a href="http://www.gnu.org/software/emacs/">Emacs</a> 24.4.1 (<a href="http://orgmode.org">Org</a> mode 8.2.10)</p>
<p class="validation"><a href="http://validator.w3.org/check?uri=referer">Validate</a></p>
</div>
        ]]>
		</content>
	</entry>
	<entry>
		<title>Link Dump #2 - Out of the OO box</title>
		<link href="http://linkdump.bltavares.com/archive/02-dump.html" />
		<link rel="alternate" type="text/plain" href="http://linkdump.bltavares.com/archive/02-dump.org"/>
		<id>http://linkdump.bltavares.com/archive/02-dump.html</id>
		<updated>2015-01-18T20:02:48-02:00</updated>
		<author>
			<name>Bruno Tavares</name>
		</author>
		<content xml:space="preserve" type="html">
        <![CDATA[
            <div id="content">
<h1 class="title">Link Dump #2 - Out of the OO box</h1>
<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Object Oriented Programming is an expensive disaster which must end</a></li>
<li><a href="#sec-2">2. Haskell content for everybody</a></li>
<li><a href="#sec-3">3. Using a stronger type system on your applications</a></li>
<li><a href="#sec-4">4. Transducers</a></li>
</ul>
</div>
</div>
<p>
Hello you there,
</p>

<p>
Welcome to another installment of the link dump.  The end of 2014 and
the beginning of 2015 has been spawning a fantastic amount of links on
my timeline.
</p>

<p>
As I took a while to send out another link dump, I have plenty of
links stored, so this one will be longer and still super interesting.
</p>

<p>
One of the many topics around my saved content is FP, and I decided to
make this a themed list.
</p>

<hr  />

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Object Oriented Programming is an expensive disaster which must end</h2>
<div class="outline-text-2" id="text-1">
<p>
lawrence wrote a quite big article on why <a href="http://www.smashcompany.com/technology/object-oriented-programming-is-an-expensive-disaster-which-must-end">Object Oriented
Programming is an expensive disaster which must end</a>.
</p>

<p>
The article might bring up some personal feelings with its tone, or
get you on defensive, but try reading it with an open mind,
criticizing Object Oriented as the silver bullet.
</p>

<p>
It defiantly made me think more why do we choose OO for any
project, or what the languages that are OO bring up to the table
when you don't use features that people suggests to not use (like
mutability or inheritance).
</p>

<p>
It was a good start to think about different styles of programming.
</p>

<p>
Joe Armstrong have also written about the topic, on <a href="http://harmful.cat-v.org/software/OO_programming/why_oo_sucks">Why OO Sucks</a>,
which gives support on the idea of coding on a different style.
</p>

<p>
Getting out of the OO mindset seems to be the goal of many people,
like Ju Gonçalves, that wrote why <a href="https://medium.com/@jugoncalves/functional-programming-should-be-your-1-priority-for-2015-47dd4641d6b9">Functional Programming should be
your 1st priority for 2015</a>.
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Haskell content for everybody</h2>
<div class="outline-text-2" id="text-2">
<p>
Haskell is a language that made me break out of the Object Oriented
mindset, but its strictness can be very daunting on the beginning.
I had to read, re-read, and give it a break sometimes to let the
thoughts to sink in, after revisiting
</p>

<p>
Michael Robert Bernstein wrote a bit about his experience learning
this intriguing language, saying that <a href="http://michaelrbernste.in/2014/12/11/you-are-learning-haskell-right-now.html">You are learning Haskell
right now</a>. It is good to see that acquiring the understand of some
higher abstractions might take its time.
</p>

<p>
There is some good content on getting Haskell up and running on <a href="http://howistart.org/posts/haskell/1">How
I Start: Haskell</a>, so you can code a bit of pure FP.  Chris Allen
evaluated some of the learning resources for Haskell and wrote his
impressions around the <a href="http://bitemyapp.com/posts/2014-12-31-functional-education.html">functional education</a>, with a good suggestion
for people with different knowledge on programming.
</p>

<p>
And if you find the errors hard to read, Don Stewart has a <a href="https://donsbot.wordpress.com/2007/11/14/no-more-exceptions-debugging-haskell-code-with-ghci/">really
nice tip to debug</a> an interactive sessions and find out where the
nasty error is coming from.
</p>

<p>
Gabriel Gozalez has a <a href="http://www.haskellforall.com/">blog</a> bringing some really good content on
Haskell and libraries; and Oliver Charles wrote <a href="https://ocharles.org.uk/blog/posts/2014-12-24-conclusion.html">24 blog posts</a> on
extensions to use on GHC. It is an amazing content which showed me
how extensible this strict language can be.
</p>

<p>
One great example of content that Gabriel Gonzalez have wrote is
<a href="http://www.haskellforall.com/2014/10/how-to-desugar-haskell-code.html">how Haskell makes use of syntax sugars</a> to provide a different
syntax other than the function calls with arguments. And if you
want more in-depth content, Heinrich Apfelmus explains how the <a href="https://hackhands.com/lazy-evaluation-works-haskell/">lazy
evaluation</a> works even for computing lazy values.
</p>

<p>
And there is no need to rush to learn the Monad abstraction. As
Chris writes <a href="http://two-wrongs.com/the-what-are-monads-fallacy">The what are monads fallacy</a>, getting the grasp of the
abstraction could be improved by understanding how each Monad is
used and implemented. In the end, monads are <a href="http://blog.plover.com/prog/burritos.html">burritos</a>, or better
put in <a href="http://adit.io/posts/2013-04-17-functors,_applicatives,_and_monads_in_pictures.html">pictures</a>.
</p>

<p>
People ask about <a href="http://stackoverflow.com/questions/3077866/large-scale-design-in-haskell/3077912">how Haskell projects grow on enterprise project</a>,
<a href="http://stackoverflow.com/questions/27852709/enterprise-patterns-with-functional-programming">or FP in general</a>, and StackOverflow provide some insights on the
design of big architectures.
</p>

<p>
I hope this is some good suggestions of content, and please,
contribute back to this list.  You can also ask questions on the
#haskell IRC channel, which have an <a href="https://gist.github.com/quchen/5280339">example</a> of a bunch of nice
people sharing knowledge.
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> Using a stronger type system on your applications</h2>
<div class="outline-text-2" id="text-3">
<p>
Typesafety is a feature that you grow into liking.  Having the
compiler rejecting the program because you used the wrong function
on a data structure makes me feel happier than having that error
being catched after many rounds of tests, or in production.
</p>

<p>
Bartosz Milewski has a post on <a href="http://bartoszmilewski.com/2014/11/24/types-and-functions/">Types and Functions</a> that could help
you to start liking some stronger type system.
</p>

<p>
Modeling your domain on that kind of type system can bring many
benefits, from on encoding the rules and logic of your application
on a executable format, to having a more readable restrictions
represented on your data.  Scott Wlaschin have a talk demonstrating
what you can do with <a href="http://vimeo.com/97507575">F# to domain your model under its type system</a>,
and leverage the benefits of having those types in-place.
</p>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> Transducers</h2>
<div class="outline-text-2" id="text-4">
<p>
Transducers are concepts that could be as complicated as Monads to
be explained.  The <a href="http://clojure.org/transducers">Clojure documentation</a> has some technical
information on using and creating transducers.
</p>

<p>
Rich Hickey gave an <a href="https://www.youtube.com/watch?v=6mTbuzafcII">introduction presentation</a> at StrangeLoop, with
a follow-up talk explaining some of the <a href="https://www.youtube.com/watch?v=4KqUvG8HPYo">inside of the abstraction</a>
on Clojure/conj.
</p>

<p>
Transducers work on top of functions, and return functions. You can
compose the resulting functions to create a processing pipeline,
but if will look a bit backwards if you are used to compose
functions.  Isac Cambron goes briefly <a href="http://isaaccambron.com/blog/2014/12/13/transducer-composition.html">explaining and demonstrating</a>
why they compose backwardly.
</p>

<p>
As I mentioned before, adding type annotation on a function could
help you understand what is allowed to get in, and what is the
output.  And annotating transducers sounds like a nice challenge.
Peter Fraenkel has a blog post with <a href="http://blog.podsnap.com/ducers2.html">annotated transducers on
Clojure. And Scala. And Haskell.</a> An the followup posts on the
series are really good to read as well.
</p>

<hr  />

<p>
I hope you like the content of this link dump, with many functional links. 
We now have the an <a href="http://linkdump.bltavares.com/atom.xml">Atom feed</a> if you would rather that delivery method.
</p>

<p>
Keep producing new content and send me links.
</p>

<p>
Cheers,
</p>

<p>
Bruno Tavares
</p>
</div>
</div>
</div>
<div id="postamble" class="status">
<p class="date">Created: 2015-01-18 Sun 20:00</p>
<p class="creator"><a href="http://www.gnu.org/software/emacs/">Emacs</a> 24.4.1 (<a href="http://orgmode.org">Org</a> mode 8.2.10)</p>
<p class="validation"><a href="http://validator.w3.org/check?uri=referer">Validate</a></p>
</div>
        ]]>
		</content>
	</entry>

</feed>
