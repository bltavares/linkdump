<?xml version="1.0" encoding="utf-8"?>
 
<feed xmlns="http://www.w3.org/2005/Atom">
 
	<title>Link Dump</title>
	<link href="http://linkdump.bltavares.com/atom.xml" rel="self" />
	<link href="http://linkdump.bltavares.com/" />
	<id>http://linkdump.bltavares.com/</id>
	<updated>2014-11-29T21:19:36-02:00</updated>

  	<entry>
		<title>Link Dump #1 - The one with a bunch of links</title>
		<link href="http://linkdump.bltavares.com/archive/01-dump.html" />
		<link rel="alternate" type="text/plain" href="http://linkdump.bltavares.com/archive/01-dump.org"/>
		<id>http://linkdump.bltavares.com/archive/01-dump.html</id>
		<updated>2014-11-23T00:32:24-02:00</updated>
		<author>
			<name>Bruno Tavares</name>
		</author>
		<content xml:space="preserve" type="html">
        <![CDATA[
            <div id="content">
<h1 class="title">Link Dump #1 - The one with a bunch of links</h1>
<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Clojure/conj</a></li>
<li><a href="#sec-2">2. Dependent Types</a></li>
<li><a href="#sec-3">3. Unikernels</a></li>
<li><a href="#sec-4">4. Xplain - Explaining X protocol on the browser</a></li>
<li><a href="#sec-5">5. Rust</a></li>
</ul>
</div>
</div>
<p>
Hello there,
</p>

<p>
This is the first collection of links I am creating and I hope you enjoy it.
</p>

<p>
I would love to have this as a two way channel to share links.
Feel free to hit me up over email with content.
</p>

<p>
No more rambling, there we go.
</p>

<hr  />

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Clojure/conj</h2>
<div class="outline-text-2" id="text-1">
<p>
Clojure/conj just happened with amazing talks.
The videos are being published really fast, almost after the talk ends.
You can follow up on the <a href="https://www.youtube.com/playlist?list=PLZdCLR02grLoc322bYirANEso3mmzvCiI">ClojureTV Youtube Channel</a>
</p>

<p>
Before you go digging the content, you might want to check Eric Normand's pre-conj material.
He collected more information around the talks, with interviews and links, so you can be part of the conversation that have been happening in-between the talks.
One cool thing is that some talks are continuations of previous, and all of this conversation is being capture on the <a href="http://www.lispcast.com/pre-conj-2014">Pre-conj Prep 2014 archive</a>
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Dependent Types</h2>
<div class="outline-text-2" id="text-2">
<p>
Are you ready to have your mind blow?
I've been hearing <a href="https://twitter.com/ctfordLink:%20https://twitter.com/ctford">Chris Ford</a> talk about <a href="http://www.idris-lang.org/">Idris</a> for a while, and recently I came across Brian McKenna coding a <a href="https://www.youtube.com/watch?v=fVBck2Zngjo">type safe printf</a> using dependent types.
And it is amazing!
</p>

<p>
Brian talked on StrangeLoop 2014 about Idris <a href="https://www.youtube.com/watch?v=4i7KrG1Afbk">with pratical examples</a> and Chris Ford talked about the ideas <a href="http://vimeo.com/100976695">behind dependent types</a>.
It is worth checking to get your mind expanded around the type system that is not so mainstream.
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> Unikernels</h2>
<div class="outline-text-2" id="text-3">
<p>
Depoying applications are getting easier everyday. Since docker came into play, the deployment scenarios are changing a lot.
Having a single unit do get your application running feels amazing, making sure the package is consisten across environments.
</p>

<p>
Darren Rush comments that this could be the path to introduce <a href="https://medium.com/@darrenrush/after-docker-unikernels-and-immutable-infrastructure-93d5a91c849e">Unikernels</a> on your immutable server deployment and list some of the projects that already tries to help you running your application on the metal with little overhead.
</p>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> Xplain - Explaining X protocol on the browser</h2>
<div class="outline-text-2" id="text-4">
<p>
Recently, Jasper St. Pierre added a new chapter on his <a href="https://magcius.github.io/xplain/article/index.html">interactive tutorial</a> that explains how X works to display images on your computer.
</p>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> Rust</h2>
<div class="outline-text-2" id="text-5">
<p>
<a href="http://www.rust-lang.org/">Rust</a> is a pretty interesting language that is being developed by Mozilla and brings some ideas to refresh the system programing space.
There are a bunch of content around the things that Rust are incorporating, like algebric datatypes, macros and borrowing pointers.
</p>

<p>
It is a language in development, and you can see some discussions like <a href="http://lucumr.pocoo.org/2014/11/6/error-handling-in-rust/">how to deal with errors</a> and <a href="http://smallcultfollowing.com/babysteps/blog/2014/11/14/allocators-in-rust/">what allocator should be used</a>.
</p>

<p>
The lifecycle of pointers itself generates several blog posts and looks like one of the most interesting features of the language.
</p>

<ul class="org-ul">
<li><a href="http://words.steveklabnik.com/pointers-in-rust-a-guide">http://words.steveklabnik.com/pointers-in-rust-a-guide</a>
</li>
<li><a href="http://paulkoerbitz.de/posts/Understanding-Pointers-Ownership-and-Lifetimes-in-Rust.html">http://paulkoerbitz.de/posts/Understanding-Pointers-Ownership-and-Lifetimes-in-Rust.html</a>
</li>
<li><a href="http://blog.skylight.io/rust-means-never-having-to-close-a-socket/">http://blog.skylight.io/rust-means-never-having-to-close-a-socket/</a>
</li>
<li><a href="http://www.randomhacks.net/2014/09/19/rust-lifetimes-reckless-cxx/">http://www.randomhacks.net/2014/09/19/rust-lifetimes-reckless-cxx/</a>
</li>
</ul>

<p>
You can also see the macro system in action on <a href="https://danielkeep.github.io/quick-intro-to-macros.html">this blog post</a>.
</p>

<p>
It is being used to write <a href="https://github.com/servo/servo">Servo</a>, a new browser engine. Using the borrowing pointer concept, they are being able to write <a href="https://blog.mozilla.org/research/2014/08/26/javascript-servos-only-garbage-collector/">better garbage collected</a> code for the engine.
Skylight is using Rust to write fast Ruby gems, instead of using C, and they <a href="http://blog.skylight.io/bending-the-curve-writing-safe-fast-native-gems-with-rust/?utm_source=rubyweekly&utm_medium=email">wrote about the process</a> as well.
</p>

<p>
You might ask "What about go?", and Adam Jacob put up a nice <a href="https://medium.com/@adamhjk/rust-and-go-e18d511fbd95">write up</a> around those two languages.
There are also Armin Ronarcher's <a href="http://lucumr.pocoo.org/2014/10/1/a-fresh-look-at-rust/">write up</a> on how he perceives Rust on the current ecosystem.
</p>

<hr  />

<p>
I think there is already a handful of content, and I gotta save some for the next link dump.
Keep producing new content and send me links.
</p>

<p>
Cheers,
</p>

<p>
Bruno Tavares</p>
</div>
</div>
</div>
<div id="postamble" class="status">
<p class="author">Author: Bruno Tavares</p>
<p class="date">Created: 2014-11-22 Sat 21:20</p>
<p class="creator"><a href="http://www.gnu.org/software/emacs/">Emacs</a> 24.4.1 (<a href="http://orgmode.org">Org</a> mode 8.2.10)</p>
<p class="validation"><a href="http://validator.w3.org/check?uri=referer">Validate</a></p>
</div>
        ]]>
		</content>
	</entry>

</feed>
